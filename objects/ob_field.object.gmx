<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_bug1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///

counter = 0

offset_speed = 0.1
speed = offset_speed
offset_max = max_x - field_w * field_step_x
//offset_max = view_wview[0] - view_wview[1]
offset_min = 0


// stars
var _stars_max = 32
var _stars = array_create(_stars_max)
for (var i=0; i&lt;_stars_max; i++) {
    _stars[i] = array_create(2)
    var star = _stars[i];
    star[@ 0] = random(view_wview[0])
    star[@ 1] = random(view_hview[0])
}

star_y[4] = 0
sf_star[0] = surface_create(view_wview[0], view_hview[0])
sf_star[1] = surface_create(view_wview[0], view_hview[0])
sf_star[2] = surface_create(view_wview[0], view_hview[0])
sf_star[3] = surface_create(view_wview[0], view_hview[0])
sf_star_count = 4

    draw_clear_alpha(c_white, 0)
    for (var i=0; i&lt;_stars_max; i++) {
        var _sf_index = i div (_stars_max div sf_star_count)
        surface_set_target(sf_star[_sf_index])
        var star = _stars[i]
        draw_point(star[0], star[1])
        surface_reset_target()
    }

image_speed = 0.05


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attack
var _ok = false

if instance_exists(ob_ship)
if instance_number(ob_bug) &gt; 0 {
    if instance_number(ob_bug_attack) &lt; floor(stage_max_attack) {
        var _side_ok = false
        while not _side_ok {
            var _lr_side = (random(10) &gt; 5)
            var i_start, i_if, i_inc
            if not _lr_side {
                _lr_side = 1
                i_start = 0
                if abs(x-offset_min) &gt; field_step_x * 2
                    _side_ok = true
            } else {
                _lr_side = -1
                i_start = field_w-1
                if abs(offset_max-x) &gt; field_step_x * 2
                    _side_ok = true
            }
            i_inc = _lr_side
        }
        for (var i=i_start; i&lt;field_w and i&gt;=0; i+=i_inc)
        if not _ok {
            for (var j=0; j&lt;field_h; j++) 
            if ds_grid_get(field, i,j) &gt; 0 {
                with ds_grid_get(field, i,j)
                with instance_create(x,y, ob_bug_attack) {
                    cell_x = other.cell_x
                    cell_y = other.cell_y
                    side = _lr_side
                }
                ds_grid_set(field, i,j, noone)
                sc_field_update()
                _ok = true
                break
            }
        } else
            break
    
        // timer for next attack
        stage_min_pause *= 0.99
        stage_max_pause *= 0.99
        stage_max_attack *= 1.01
            
    }
    alarm[0] = random_range(stage_min_pause, stage_max_pause)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move

if x &gt; offset_max and speed &gt; 0 
    speed = -offset_speed

if x &lt; offset_min and speed &lt; 0 
    speed = offset_speed

view_wview[1] = min(
    field_w * field_step_x,
    field_w * field_step_x + x,
    view_wview[0] - x 
)
view_xview[1] = max_x * 2 - min(0, x)

view_wport[1] = view_wview[1] * 5
view_xport[1] = clamp(x * 5, 0, view_wview[0]*5 -view_wport[1])
//view_wport[1] = view_wview[1]
//view_xport[1] = clamp(x , 0, view_wview[0] -view_wport[1])



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for collision with ob_shot_friendly

with ob_shot_friendly {
    var _x = x - other.x;
    var _y = y - other.y;
    
    if (_x&gt;0 and _x&lt;field_w * field_step_x) and
       (_y&gt;0 and _y&lt;field_h * field_step_y){
        var _cell_x = _x div field_step_x
        var _cell_y = _y div field_step_y
        var _bug = ds_grid_get(field, _cell_x, _cell_y)
        if _bug &gt; 0
        if instance_place(_x + max_x * 2, _y, _bug) {
            ds_grid_set(field, _cell_x, _cell_y, noone)
            with _bug
                sc_bug_die()
            instance_destroy()
            sc_field_update()
        }
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stars

if view_current = 2 {
    counter++
    if counter mod 2 = 0
    for (var i=0; i&lt;sf_star_count; i++)
    if surface_exists(sf_star[i]) {
        star_y[i] = (star_y[i] + 0.75 / (1 + 1.5*i)) mod view_hview[0]
        draw_surface(sf_star[i], 0, star_y[i] - view_hview[0])
        draw_surface(sf_star[i], 0, star_y[i])
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
