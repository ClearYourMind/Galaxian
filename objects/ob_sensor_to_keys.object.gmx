<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define used keys in This Game

enum key {
  W, A, S, D,
  G, H, J,
  Enter
}

keyb[key.W] = false 
keyb[key.A] = false 
keyb[key.S] = false 
keyb[key.D] = false 
keyb[key.G] = false 
keyb[key.H] = false 
keyb[key.J] = false 
keyb[key.Enter] = false 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Settings

objInput  = noone  //ob_sensor_control
objOutput = noone  //ob_control

stick_active_distance = 50 // % 
gesture_direction_range = 24 // in degrees, +-



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Translate sensor inputs to keys (Stick)

//  key W
if objInput.stick_y &lt; -stick_active_distance {
  if not keyb[key.W] {
    keyb[key.W] = true
    with objOutput
      event_perform(ev_keypress, ord("W"))
  }
} else {
  if keyb[key.W] {
    keyb[key.W] = false
    with objOutput
      event_perform(ev_keyrelease, ord("W"))
  }
}

//  key A
if objInput.stick_x &lt; -stick_active_distance {
  if not keyb[key.A] {
    keyb[key.A] = true
    with objOutput
      event_perform(ev_keypress, ord("A"))
  }
} else {
  if keyb[key.A] {
    keyb[key.A] = false
    with objOutput
      event_perform(ev_keyrelease, ord("A"))
  }
}

//  key S
if objInput.stick_y &gt; stick_active_distance {
  if not keyb[key.S] {
    keyb[key.S] = true
    with objOutput
      event_perform(ev_keypress, ord("S"))
  }
} else {
  if keyb[key.S] {
    keyb[key.S] = false
    with objOutput
      event_perform(ev_keyrelease, ord("S"))
  }
}

//  key D
if objInput.stick_x &gt; stick_active_distance {
  if not keyb[key.D] {
    keyb[key.D] = true
    with objOutput
      event_perform(ev_keypress, ord("D"))
  }
} else {
  if keyb[key.D] {
    keyb[key.D] = false
    with objOutput
      event_perform(ev_keyrelease, ord("D"))
  }
}

//  key Enter
if objInput.stick_gesture_type = gesture.longtap {
  if not keyb[key.Enter] {
    keyb[key.Enter] = true
    with objOutput
      event_perform(ev_keypress, vk_enter)
  }
} else {
  if keyb[key.Enter] {
    keyb[key.Enter] = false
    with objOutput
      event_perform(ev_keyrelease, vk_enter)
  }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Translate sensor inputs to keys (Gestures)

//  key G (Fire)
if objInput.gesture_type = gesture.tap {
  if not keyb[key.G] {
    keyb[key.G] = true
    with objOutput
      event_perform(ev_keypress, ord("G"))
  }
} else {
  if keyb[key.G] {
    keyb[key.G] = false
    with objOutput
      event_perform(ev_keyrelease, ord("G"))
  }
}

//  key H (Jump)
if objInput.gesture_type = gesture.swipe {
  if (objInput.gesture_direction &gt; 270-gesture_direction_range) and
     (objInput.gesture_direction &lt; 270+gesture_direction_range) {
    if not keyb[key.H] {
      keyb[key.H] = true
      with objOutput
        event_perform(ev_keypress, ord("H"))
    }
  }
} else {
  if keyb[key.H] {
    keyb[key.H] = false
    with objOutput
      event_perform(ev_keyrelease, ord("H"))
  }
}

//  key J (Special)
if objInput.gesture_type = gesture.longtap {
  if not keyb[key.J] {
    keyb[key.J] = true
    with objOutput
      event_perform(ev_keypress, ord("J"))
  }
} else {
  if keyb[key.J] {
    keyb[key.J] = false
    with objOutput
      event_perform(ev_keyrelease, ord("J"))
  }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
